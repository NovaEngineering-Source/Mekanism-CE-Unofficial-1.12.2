import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'eclipse'
	id 'idea'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.16'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = project.mod_version +"." + project.homebaked
group = project.maven_group
archivesBaseName = project.archives_base_name

defaultTasks 'fullBuild'

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    // withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = '1.12.2'

    // MCP Mappings
    mcpMappingChannel = 'stable'
    mcpMappingVersion = '39'

    // Set username here, the UUID will be looked up automatically
    username = 'sddsd2332'

    // Add any additional tweaker classes here
    // extraTweakClasses.add('org.spongepowered.asm.launch.MixinTweaker')
    
    // Add various JVM arguments here for runtime
    def args = ["-ea:${project.group}"]
    if (project.use_coremod.toBoolean()) {
        args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
    }
    if (project.use_mixins.toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }
    extraRunJvmArguments.addAll(args)

    // Include and use dependencies' Access Transformer files
    useDependencyAccessTransformers = true
    
    // Add any properties you want to swap out for a dynamic value at build time here
    // Any properties here will be added to a class at build time, the name can be configured below
    // Example:
     injectedTags.put('VERSION', project.version)
    // injectedTags.put('MOD_ID', project.archives_base_name)
}

// Generate a group.archives_base_name.Tags class
tasks.injectTags.configure {
    // Change Tags class' name here:
    outputClassName.set("${project.group}.${project.archives_base_name}.Tags")
}

repositories {
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        name 'SpongePowered Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    mavenLocal() // Must be last for caching to work
}

dependencies {
    if (project.use_assetmover.toBoolean()) {
        implementation 'com.cleanroommc:assetmover:2.5'
    }

    compileOnly "org.jetbrains:annotations:17.0.0"
    // Example of deobfuscating a dependency
		implementation rfg.deobf('curse.maven:mcmultipart-239431:2615930')
		implementation rfg.deobf('curse.maven:had-enough-items-557549:4543375')
		implementation rfg.deobf('curse.maven:tesla-244651:2487959')
		implementation rfg.deobf('curse.maven:inventory-tweaks-API-223094:2923461')
		implementation rfg.deobf('curse.maven:opencomputers-223008:4526246')
		implementation rfg.deobf('curse.maven:hwyla-253449:2568751')
		implementation rfg.deobf('curse.maven:redstone-flux-270789:2920436')
		implementation rfg.deobf('curse.maven:CTM-267602:2915363')
		implementation rfg.deobf('curse.maven:industrial-craft-242638:3838713')
		implementation rfg.deobf('curse.maven:computercraft-67504:2478952')
		implementation rfg.deobf('curse.maven:the-one-probe-245211:2667280')
		implementation rfg.deobf('curse.maven:ae2-extended-life-570458:4553942')
		implementation rfg.deobf('curse.maven:mystical-agradditions-256247:2704832')
		implementation rfg.deobf('curse.maven:mystical-agriculture-246640:2704562')
        implementation rfg.deobf('curse.maven:cucumber-272335:2645867')

        implementation 'curse.maven:groovyscript-687577:4487379'
		implementation 'curse.maven:buildcraft-61811:3204475'
		implementation 'curse.maven:crafttweaker-239197:4534504'
		implementation 'zone.rong:mixinbooter:7.1'

        runtimeOnly 'curse.maven:ftb-library-237167:2985811'
        runtimeOnly 'curse.maven:ftb-utilities-237102:3157548'
		
    if (project.use_mixins.toBoolean()) {
        // Change your mixin refmap name here:
        String mixin = modUtils.enableMixins('org.spongepowered:mixin:0.8.3', "mixins.${project.archives_base_name}.refmap.json")
        api (mixin) {
            transitive = false
        }
        annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
        annotationProcessor 'com.google.guava:guava:24.1.1-jre'
        annotationProcessor 'com.google.code.gson:gson:2.8.6'
        annotationProcessor (mixin) {
            transitive = false
        }
    }

}

// Adds Access Transformer files to tasks
if (project.use_access_transformer.toBoolean()) {
    for (File at : sourceSets.getByName("main").resources.files) {
        if (at.name.toLowerCase().endsWith("_at.cfg")) {
            tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
            tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
        }
    }
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property 'version', project.version
    inputs.property 'mc_version', project.minecraft.version
    
    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // Replace version and mcversion
        fcd.expand (
                'version': project.version,
                'mc_version': project.minecraft.version
        )
    }
    
    if (project.use_access_transformer.toBoolean()) {
        rename '(.+_at.cfg)', 'META-INF/$1' // Make sure Access Transformer files are in META-INF folder
    }
}

jar {
    manifest {
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
            }
        }
        if (project.use_access_transformer.toBoolean()) {
            attribute_map['FMLAT'] = 'mekanism_at.cfg'
        }
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider{ configurations.embed.collect {it.isDirectory() ? it : zipTree(it)} })
}

def setMainManifestProps = { Manifest manifest->
    manifest.attributes (
            'FMLAT': 'mekanism_at.cfg',
            'FMLCorePluginContainsFMLMod': 'true',
            'FMLCorePlugin': 'mekanism.coremod.MekanismCoremod'
    )
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient --username sddsd2332"]
                }
                "2. Build mods"(Gradle) {
                    taskNames = ["build"]
                }
                "3. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
                "4. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "5. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}

task coreJar(type: Jar) {
    archiveFileName = "Mekanism-${project.version}.jar"
    dependsOn 'reobfJar'
    archiveClassifier = "core"

    from('etc/core') {
        include '*.info'
        expand 'version':project.version,'mc_version':project.minecraft.version,'mcmp_version':mcmp_version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        exclude 'mekanism/tools/**', 'mekanism/generators/**', 'assets/mekanismtools/**', 'assets/mekanismgenerators/**', 'mcmod.info'
    }

    manifest(setMainManifestProps)
}

task toolsJar(type: Jar) {
    archiveFileName = "MekanismTools-${project.version}.jar"
    dependsOn 'reobfJar'
    archiveClassifier =  "tools"

    from('etc/tools') {
        include '*.info'
        expand 'version':project.version,'mc_version':project.minecraft.version,'mcmp_version':mcmp_version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'mekanism/tools/**', 'assets/mekanismtools/**'
    }
}

task generatorsJar(type: Jar) {
    archiveFileName = "MekanismGenerators-${project.version}.jar"
    dependsOn 'reobfJar'
    archiveClassifier =  "generators"

    from('etc/generators') {
        include '*.info'
        expand 'version':project.version,'mc_version':project.minecraft.version,'mcmp_version':mcmp_version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'mekanism/generators/**', 'assets/mekanismgenerators/**'
    }
}

task apiJar(type: Jar) {
    archiveClassifier = "api"
    archiveBaseName = "Mekanism"
    dependsOn "sourcesJar"
    include 'mekanism/api/**'
    from sourceSets.main.java.srcDirs
    from sourceSets.main.output
}

task fullBuild(type: Delete) {
    delete jar
    dependsOn ("build")
}

artifacts {
    archives jar
    archives apiJar
    archives coreJar
    archives toolsJar
    archives generatorsJar
}


tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}
